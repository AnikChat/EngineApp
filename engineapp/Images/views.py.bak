# standard library imports
import logging
import os

# related third party imports
import webapp2
from webapp2_extras import jinja2
from google.appengine.ext import blobstore
from google.appengine.ext.webapp import blobstore_handlers
from google.appengine.api.images import get_serving_url
from google.appengine.ext.webapp import template
from google.appengine.ext.blobstore import BlobKey

# local application/library specific imports
from models import Image, Comment


image_types = ('image/bmp', 'image/jpeg', 'image/png',
               'image/gif', 'image/tiff', 'image/x-icon')

video_types = ('video/mp4')

page = """
                <html>
                        <head></head>
                        <body><form method="GET" action="{0}" autocomplete="on">
                        <button id="click" style="display:none;">go</button></form>
                        <script>
                        window.onload = function(){{
                            alert("Sucessfully {1}");
                            var button = document.getElementById('click');
                            button.form.submit();
                        }}
                        </script>
                        </body>
                    </html>

                """


class BaseHandler(webapp2.RequestHandler):

    @webapp2.cached_property
    def jinja2(self):
        return jinja2.get_jinja2(app=self.app)

    def render_template(self, filename, **template_args):
        self.response.write(
            self.jinja2.render_template(filename, **template_args))


class PhotoUploadFormHandler(BaseHandler):

    def get(self):
        upload_url = blobstore.create_upload_url('/upload_photo')
        # To upload files to the blobstore, the request method must be "POST"
        # and enctype must be set to "multipart/form-data".
        self.response.out.write(
            template.render('templates/Upload.html', {'upload': upload_url}))


class PhotoUploadHandler(blobstore_handlers.BlobstoreUploadHandler):

    def post(self):
        try:
            logging.error("Before")
            upload = self.get_uploads()[0]
            logging.error("after done")
            Photo = Image(
                name='Random',
                blob_key=upload.key())
            logging.error("Before put")
            pic = Photo.put()
            logging.error("after put befor picid")
            pic_id = "/Home#" + str(pic.id())
            logging.error(pic_id)
            #self.redirect('/view_photo/%s' % upload.key())
            render = page.format(pic_id, "Uploaded")
            logging.error(page)
            self.response.write(render)

        except:
            self.error(500)


class ListPhotoHandler(blobstore_handlers.BlobstoreDownloadHandler,
                       BaseHandler):

    def get(self):
        # Get the all user pics
        pics = Image.get_all_Images()
        page = template.render(
            'templates/Home_Header.html', {'log': "none", 'logged': ""})
        if not pics:
            self.error(404)
        else:
            for pic in pics:
                if not blobstore.get(pic.blob_key):
                    logging.error('oops something went Terribly wrong.')
                else:
                    key = blobstore.get(pic.blob_key)
                    url = get_serving_url(key, size=150, crop=True)
                    comments = Comment.get_Detail(pic.key)
                    context = {'id': pic.key.id(), 'Name': pic.name,
                               'url': url, 'Date': pic.date, 'comments': comments, 'nlikes': pic.Like, 'ndislikes': pic.Dislike}
                    blob_info = blobstore.BlobInfo.get(pic.blob_key)
                    if blob_info.content_type in image_types:
                        page = page + \
                            template.render(
                                'templates/Home_Form_Image.html', context)
                    elif blob_info.content_type in video_types:
                        page = page + \
                            template.render(
                                'templates/Home_Form_Video.html', context)
                    else:
                        logging.error("Something is Missed" + str(pic.id))
            page = page + template.render('templates/Home_footer.html', {})
            self.response.write(page)


class CommentHandler(BaseHandler):

    def post(self):
        logging.error(self.request.get('pid'))
        photo_id = int(self.request.get('pid'))
        photo = Image.get_Detail(photo_id)
        if photo:
            try:
                comment = Comment(
                    Author='Guest',
                    Comment='Hello this is Comment', Image=photo.key)
                logging.error("I was right put is .....")
                comment.put()
                logging.error("PUT IS NOT!!")
                logging.info("Horray, a comment is saved.")
            except:
                logging.error("Error saving User in datastore.")
            finally:
                pic_id = "/Home#" + str(photo_id)
                logging.error("after picid before page")
                render = page.format(pic_id, "Commented")
                logging.error("after page")
                self.response.write(render)


class LikeHandler(BaseHandler):

    def post(self):
        photo_id = int(self.request.get('pid'))
        photo = Image.get_Detail(photo_id)
        if photo:
            try:
                photo.Like = photo.Like + 1
                photo.put()
            except:
                logging.error("Error saving User in datastore.")
            finally:
                pic_id = "/Home#" + str(photo_id)
                logging.error("after picid before page")
                render = page.format(pic_id, "Liked")
                logging.error("after page")
                self.response.write(render)


class DisLikeHandler(BaseHandler):

    def post(self):
        photo_id = int(self.request.get('pid'))
        photo = Image.get_Detail(photo_id)
        if photo:
            try:
                photo.Like = photo.Dislike + 1
                photo.put()
            except:
                logging.error("Error saving User in datastore.")
            finally:
                pic_id = "/Home#" + str(photo_id)
                logging.error("after picid before page")
                render = page.format(pic_id, "Liked")
                logging.error("after page")
                self.response.write(render)
